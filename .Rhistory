## % of Referrals Scheduled within 3 Days from date Accepted by provider (PM #1) X --Scheduling DONE
"calc_pm ",                        list(data = dat
, start = "assigned"
, stop = "agreed"
, metric = "pm2"
, target = 3),
## Average Days from Accepted by Provider to First Scheduled Visit (PM #2)
## % of Referrals with a Scheduled Visit within 7 Days of provider Accepting referral (PM #2)
"calc_pm",                        list(data = dat
, start = "assigned"
, stop = "scheduled"
, pm = 'pms'
, target = 7
)
)
out <- purrr::invoke_map(calc_function_list$f
,calc_function_list$params)
# Removing data object from memory
rm(dat)
}
calc_multiple()
establish_con_olvr_rplc()
calc_multiple <- function(bld_sch_name = "independent"){
message("Querying data... ", appendLF = FALSE)
DBI::dbSendQuery(con, dbplyr::build_sql("SET search_path TO ", bld_sch_name))
dat <- DBI::dbGetQuery(con, "SELECT org_id
, ref_id
, assigned_date
, agreed_date
, scheduled_date
, work_days_elapsed(assigned_date, agreed_date) AS pm1
, work_days_elapsed(assigned_date, scheduled_date) AS pm2
, CASE WHEN independent.work_days_elapsed(assigned_date, agreed_date) <= 3 THEN 1 ELSE 0 END AS pm1_goal
, CASE WHEN independent.work_days_elapsed(assigned_date, scheduled_date) <= 7 THEN 1 ELSE 0 END AS pm2_goal
FROM independent.assigned_agreed_scheduled;")
message("done")
message("* CALCULATE METRIC TABLES *")
calc_function_list <- tribble(
~f,                                          ~params,
## Average Number of Days from Accepted by Provider to Scheduled (PM #1) X --Scheduling DONE
## % of Referrals Scheduled within 3 Days from date Accepted by provider (PM #1) X --Scheduling DONE
"calc_pm ",                        list(data = dat
, start = "assigned"
, stop = "agreed"
, metric = "pm2"
, target = 3),
## Average Days from Accepted by Provider to First Scheduled Visit (PM #2)
## % of Referrals with a Scheduled Visit within 7 Days of provider Accepting referral (PM #2)
"calc_pm",                        list(data = dat
, start = "assigned"
, stop = "scheduled"
, pm = 'pms'
, target = 7
)
)
out <- purrr::invoke_map(calc_function_list$f
,calc_function_list$params)
# Removing data object from memory
rm(dat)
}
calc_multiple()
?invike_map
?invoke_map
calc_multiple <- function(bld_sch_name = "independent"){
message("Querying data... ", appendLF = FALSE)
DBI::dbSendQuery(con, dbplyr::build_sql("SET search_path TO ", bld_sch_name))
dat <- DBI::dbGetQuery(con, "SELECT org_id
, ref_id
, assigned_date
, agreed_date
, scheduled_date
, work_days_elapsed(assigned_date, agreed_date) AS pm1
, work_days_elapsed(assigned_date, scheduled_date) AS pm2
, CASE WHEN independent.work_days_elapsed(assigned_date, agreed_date) <= 3 THEN 1 ELSE 0 END AS pm1_goal
, CASE WHEN independent.work_days_elapsed(assigned_date, scheduled_date) <= 7 THEN 1 ELSE 0 END AS pm2_goal
FROM independent.assigned_agreed_scheduled;")
message("done")
message("* CALCULATE METRIC TABLES *")
calc_function_list <- tribble(
~f,                                          ~params,
## Average Number of Days from Accepted by Provider to Scheduled (PM #1) X --Scheduling DONE
## % of Referrals Scheduled within 3 Days from date Accepted by provider (PM #1) X --Scheduling DONE
"calc_pm ",                        list(data = dat
, start = "assigned"
, stop = "agreed"
, metric = "pm2"
, target = 3),
## Average Days from Accepted by Provider to First Scheduled Visit (PM #2)
## % of Referrals with a Scheduled Visit within 7 Days of provider Accepting referral (PM #2)
"calc_pm",                        list(data = dat
, start = "assigned"
, stop = "scheduled"
, pm = 'pms'
, target = 7
)
)
out <- purrr::invoke_map(calc_pm$f
,calc_pm$params)
# Removing data object from memory
rm(dat)
}
calc_multiple()
calc_pm(data = dat, start = "assigned"
, stop = "agreed"
, metric = "pm2")
calc_multiple <- function(bld_sch_name = "independent"){
message("Querying data... ", appendLF = FALSE)
DBI::dbSendQuery(con, dbplyr::build_sql("SET search_path TO ", bld_sch_name))
dat <- DBI::dbGetQuery(con, "SELECT org_id
, ref_id
, assigned_date
, agreed_date
, scheduled_date
, work_days_elapsed(assigned_date, agreed_date) AS pm1
, work_days_elapsed(assigned_date, scheduled_date) AS pm2
, CASE WHEN independent.work_days_elapsed(assigned_date, agreed_date) <= 3 THEN 1 ELSE 0 END AS pm1_goal
, CASE WHEN independent.work_days_elapsed(assigned_date, scheduled_date) <= 7 THEN 1 ELSE 0 END AS pm2_goal
FROM independent.assigned_agreed_scheduled;")
message("done")
message("* CALCULATE METRIC TABLES *")
calc_function_list <- tribble(
~f,                                          ~params,
## Average Number of Days from Accepted by Provider to Scheduled (PM #1) X --Scheduling DONE
## % of Referrals Scheduled within 3 Days from date Accepted by provider (PM #1) X --Scheduling DONE
"calc_pm ",                        list(data = dat
, start = "assigned"
, stop = "agreed"
, metric = "pm1"
, target = 3),
## Average Days from Accepted by Provider to First Scheduled Visit (PM #2)
## % of Referrals with a Scheduled Visit within 7 Days of provider Accepting referral (PM #2)
"calc_pm",                        list(data = dat
, start = "assigned"
, stop = "scheduled"
, pm = 'pm2'
, target = 7
)
)
out <- purrr::invoke_map(calc_pm$f
,calc_pm$params)
# Removing data object from memory
rm(dat)
}
calc_multiple()
calc_pm(data = dat, start = "assigned"
, stop = "agreed"
, metric = "pm2"
, target = 3
)
calc_pm(data = dat, start = "assigned"
, stop = "agreed"
, metric = "pm1"
, target = 7
)
calc_multiple <- function(bld_sch_name = "independent"){
message("Querying data... ", appendLF = FALSE)
DBI::dbSendQuery(con, dbplyr::build_sql("SET search_path TO ", bld_sch_name))
dat <- DBI::dbGetQuery(con, "SELECT org_id
, ref_id
, assigned_date
, agreed_date
, scheduled_date
, work_days_elapsed(assigned_date, agreed_date) AS pm1
, work_days_elapsed(assigned_date, scheduled_date) AS pm2
, CASE WHEN independent.work_days_elapsed(assigned_date, agreed_date) <= 3 THEN 1 ELSE 0 END AS pm1_goal
, CASE WHEN independent.work_days_elapsed(assigned_date, scheduled_date) <= 7 THEN 1 ELSE 0 END AS pm2_goal
FROM independent.assigned_agreed_scheduled;")
message("done")
message("* CALCULATE METRIC TABLES *")
calc_function_list <- tribble(
~f,                                          ~params,
## Average Number of Days from Accepted by Provider to Scheduled (PM #1) X --Scheduling DONE
## % of Referrals Scheduled within 3 Days from date Accepted by provider (PM #1) X --Scheduling DONE
"calc_pm ",                        list(start = "assigned"
, stop = "agreed"
, metric = "pm1"
, target = 3),
## Average Days from Accepted by Provider to First Scheduled Visit (PM #2)
## % of Referrals with a Scheduled Visit within 7 Days of provider Accepting referral (PM #2)
"calc_pm",                        list(start = "assigned"
, stop = "scheduled"
, pm = 'pm2'
, target = 7
)
)
out <- purrr::invoke_map(calc_pm$f
,calc_pm$params)
# Removing data object from memory
rm(dat)
}
calc_multiple()
calc_multiple <- function(bld_sch_name = "independent"){
message("Querying data... ", appendLF = FALSE)
DBI::dbSendQuery(con, dbplyr::build_sql("SET search_path TO ", bld_sch_name))
dat <- DBI::dbGetQuery(con, "SELECT org_id
, ref_id
, assigned_date
, agreed_date
, scheduled_date
, work_days_elapsed(assigned_date, agreed_date) AS pm1
, work_days_elapsed(assigned_date, scheduled_date) AS pm2
, CASE WHEN independent.work_days_elapsed(assigned_date, agreed_date) <= 3 THEN 1 ELSE 0 END AS pm1_goal
, CASE WHEN independent.work_days_elapsed(assigned_date, scheduled_date) <= 7 THEN 1 ELSE 0 END AS pm2_goal
FROM independent.assigned_agreed_scheduled;")
message("done")
message("* CALCULATE METRIC TABLES *")
calc_function_list <- tribble(
~f,                                          ~params,
## Average Number of Days from Accepted by Provider to Scheduled (PM #1) X --Scheduling DONE
## % of Referrals Scheduled within 3 Days from date Accepted by provider (PM #1) X --Scheduling DONE
"calc_pm ",                        list(data = dat
, start = "assigned"
, stop = "agreed"
, metric = "pm1"
, target = 3),
## Average Days from Accepted by Provider to First Scheduled Visit (PM #2)
## % of Referrals with a Scheduled Visit within 7 Days of provider Accepting referral (PM #2)
"calc_pm",                        list(data = dat
, start = "assigned"
, stop = "scheduled"
, pm = 'pm2'
, target = 7
)
)
out <- purrr::invoke_map(calc_pm$f
,calc_pm$params)
# Removing data object from memory
rm(dat)
}
calc_multiple()
calc_multiple <- function(bld_sch_name = "independent"){
message("Querying data... ", appendLF = FALSE)
DBI::dbSendQuery(con, dbplyr::build_sql("SET search_path TO ", bld_sch_name))
dat <- DBI::dbGetQuery(con, "SELECT org_id
, ref_id
, assigned_date
, agreed_date
, scheduled_date
, work_days_elapsed(assigned_date, agreed_date) AS pm1
, work_days_elapsed(assigned_date, scheduled_date) AS pm2
, CASE WHEN independent.work_days_elapsed(assigned_date, agreed_date) <= 3 THEN 1 ELSE 0 END AS pm1_goal
, CASE WHEN independent.work_days_elapsed(assigned_date, scheduled_date) <= 7 THEN 1 ELSE 0 END AS pm2_goal
FROM independent.assigned_agreed_scheduled;")
message("done")
message("* CALCULATE METRIC TABLES *")
calc_function_list <- tribble(
~f,                                          ~params,
## Average Number of Days from Accepted by Provider to Scheduled (PM #1) X --Scheduling DONE
## % of Referrals Scheduled within 3 Days from date Accepted by provider (PM #1) X --Scheduling DONE
"calc_pm ",                        list(data = dat
, start = "assigned"
, stop = "agreed"
, metric = "pm1"
, target = 3)#,
## Average Days from Accepted by Provider to First Scheduled Visit (PM #2)
## % of Referrals with a Scheduled Visit within 7 Days of provider Accepting referral (PM #2)
# "calc_pm",                        list(data = dat
#                                        , start = "assigned"
#                                        , stop = "scheduled"
#                                        , pm = 'pm2'
#                                        , target = 7
#                                        )
)
out <- purrr::invoke_map(calc_pm$f
,calc_pm$params)
# Removing data object from memory
rm(dat)
}
calc_multiple()
library(oliveR2)
calc_multiple()
establish_con_olvr_rplc()
calc_multiple()
system.file('extdata'
,package = 'oliveR2')
library(oliveR2)
calc_multiple()
establish_con_olvr_rplc()
calc_multiple()
library(oliveR2)
establish_con_olvr_rplc()
calc_multiple()
dat <- DBI::dbGetQuery(con, "SELECT org_id
, ref_id
, assigned_date
, agreed_date
, scheduled_date
, work_days_elapsed(assigned_date, agreed_date) AS pm1
, work_days_elapsed(assigned_date, scheduled_date) AS pm2
, CASE WHEN independent.work_days_elapsed(assigned_date, agreed_date) <= 3 THEN 1 ELSE 0 END AS pm1_goal
, CASE WHEN independent.work_days_elapsed(assigned_date, scheduled_date) <= 7 THEN 1 ELSE 0 END AS pm2_goal
FROM independent.assigned_agreed_scheduled;")
calc_pm(data = dat
, start = "assigned"
, stop = "scheduled"
, pm = 'pm2'
, target = 7)
calc_pm(data = dat, start = "assigned"
, stop = "agreed"
, metric = "pm1"
, target = 7
)
calc_pm(data = dat, start = "assigned"
, stop = "agreed"
, metric = "pm2"
, target = 7
)
library(oliveR2)
library(oliveR2)
establish_con_olvr_rplc()
calc_multiple()
calc_function_list <- tribble(
~f,                                          ~params,
## Average Number of Days from Accepted by Provider to Scheduled (PM #1) X --Scheduling DONE
## % of Referrals Scheduled within 3 Days from date Accepted by provider (PM #1) X --Scheduling DONE
"calc_pm ",                        list(data = dat
, start = "assigned"
, stop = "agreed"
, metric = "pm1"
, target = 3),
## Average Days from Accepted by Provider to First Scheduled Visit (PM #2)
## % of Referrals with a Scheduled Visit within 7 Days of provider Accepting referral (PM #2)
"calc_pm",                        list(data = dat
, start = "assigned"
, stop = "scheduled"
, metric = 'pm2'
, target = 7)
)
calc_function_list
purrr::invoke_map(calc_function_list$f
,calc_function_list$params)
calc_function_list <- tribble(
~f,                                          ~params,
## Average Number of Days from Accepted by Provider to Scheduled (PM #1) X --Scheduling DONE
## % of Referrals Scheduled within 3 Days from date Accepted by provider (PM #1) X --Scheduling DONE
"calc_pm",                        list(data = dat
, start = "assigned"
, stop = "agreed"
, metric = "pm1"
, target = 3),
## Average Days from Accepted by Provider to First Scheduled Visit (PM #2)
## % of Referrals with a Scheduled Visit within 7 Days of provider Accepting referral (PM #2)
"calc_pm",                        list(data = dat
, start = "assigned"
, stop = "scheduled"
, metric = 'pm2'
, target = 7)
)
out <- purrr::invoke_map(calc_function_list$f
,calc_function_list$params)
library(oliveR2)
library(oliveR2)
oliveR2::establish_con_olvr_rplc()
calc_multiple()
calc_function_list <- tribble(
~f,                                          ~params,
## Average Number of Days from Accepted by Provider to Scheduled (PM #1) X --Scheduling DONE
## % of Referrals Scheduled within 3 Days from date Accepted by provider (PM #1) X --Scheduling DONE
"calc_pm",                        list(data = dat
, start = "assigned"
, stop = "agreed"
, metric = "pm1"
, target = 3),
## Average Days from Accepted by Provider to First Scheduled Visit (PM #2)
## % of Referrals with a Scheduled Visit within 7 Days of provider Accepting referral (PM #2)
"calc_pm",                        list(data = dat
, start = "assigned"
, stop = "scheduled"
, metric = 'pm2'
, target = 7),
"calc_prop_missed_visit_prvdr_fault",            list(),
"calc_child_count_referral",                     list()
)
purrr::invoke_map(calc_function_list$f
,calc_function_list$params)
library(oliveR2)
establish_con_olvr_rplc()
calc_multiple()
calc_function_list <- tribble(
~f,                                          ~params,
## Average Number of Days from Accepted by Provider to Scheduled (PM #1) X --Scheduling DONE
## % of Referrals Scheduled within 3 Days from date Accepted by provider (PM #1) X --Scheduling DONE
"calc_pm",                        list(data = dat
, start = "assigned"
, stop = "agreed"
, metric = "pm1"
, target = 3),
## Average Days from Accepted by Provider to First Scheduled Visit (PM #2)
## % of Referrals with a Scheduled Visit within 7 Days of provider Accepting referral (PM #2)
"calc_pm",                        list(data = dat
, start = "assigned"
, stop = "scheduled"
, metric = 'pm2'
, target = 7),
"calc_prop_missed_visit_prvdr_fault",            list(),
"calc_child_count_referral",                     list()
)
calc_function_list
calc_multiple <- function(bld_sch_name = "independent"){
message("Querying data... ", appendLF = FALSE)
DBI::dbSendQuery(con, dbplyr::build_sql("SET search_path TO ", bld_sch_name))
dat <- DBI::dbGetQuery(con, "SELECT org_id
, ref_id
, assigned_date
, agreed_date
, scheduled_date
, work_days_elapsed(assigned_date, agreed_date) AS pm1
, work_days_elapsed(assigned_date, scheduled_date) AS pm2
, CASE WHEN independent.work_days_elapsed(assigned_date, agreed_date) <= 3 THEN 1 ELSE 0 END AS pm1_goal
, CASE WHEN independent.work_days_elapsed(assigned_date, scheduled_date) <= 7 THEN 1 ELSE 0 END AS pm2_goal
FROM independent.assigned_agreed_scheduled;")
message("done")
message("* CALCULATE METRIC TABLES *")
calc_function_list <- tribble(
~f,                                          ~params,
## Average Number of Days from Accepted by Provider to Scheduled (PM #1) X --Scheduling DONE
## % of Referrals Scheduled within 3 Days from date Accepted by provider (PM #1) X --Scheduling DONE
"calc_pm",                        list(data = dat
, start = "assigned"
, stop = "agreed"
, metric = "pm1"
, target = 3),
## Average Days from Accepted by Provider to First Scheduled Visit (PM #2)
## % of Referrals with a Scheduled Visit within 7 Days of provider Accepting referral (PM #2)
"calc_pm",                        list(data = dat
, start = "assigned"
, stop = "scheduled"
, metric = 'pm2'
, target = 7),
"calc_prop_missed_visit_prvdr_fault",            list()#,
# "calc_child_count_referral",                     list()
)
out <- purrr::invoke_map(calc_function_list$f
,calc_function_list$params)
# Removing data object from memory
rm(dat)
}
calc_multiple()
calc_multiple <- function(bld_sch_name = "independent"){
message("Querying data... ", appendLF = FALSE)
DBI::dbSendQuery(con, dbplyr::build_sql("SET search_path TO ", bld_sch_name))
dat <- DBI::dbGetQuery(con, "SELECT org_id
, ref_id
, assigned_date
, agreed_date
, scheduled_date
, work_days_elapsed(assigned_date, agreed_date) AS pm1
, work_days_elapsed(assigned_date, scheduled_date) AS pm2
, CASE WHEN independent.work_days_elapsed(assigned_date, agreed_date) <= 3 THEN 1 ELSE 0 END AS pm1_goal
, CASE WHEN independent.work_days_elapsed(assigned_date, scheduled_date) <= 7 THEN 1 ELSE 0 END AS pm2_goal
FROM independent.assigned_agreed_scheduled;")
message("done")
message("* CALCULATE METRIC TABLES *")
calc_function_list <- tribble(
~f,                                          ~params,
## Average Number of Days from Accepted by Provider to Scheduled (PM #1) X --Scheduling DONE
## % of Referrals Scheduled within 3 Days from date Accepted by provider (PM #1) X --Scheduling DONE
"calc_pm",                        list(data = dat
, start = "assigned"
, stop = "agreed"
, metric = "pm1"
, target = 3),
## Average Days from Accepted by Provider to First Scheduled Visit (PM #2)
## % of Referrals with a Scheduled Visit within 7 Days of provider Accepting referral (PM #2)
"calc_pm",                        list(data = dat
, start = "assigned"
, stop = "scheduled"
, metric = 'pm2'
, target = 7),
# "calc_prop_missed_visit_prvdr_fault",            list()#,
"calc_child_count_referral",                     list()
)
out <- purrr::invoke_map(calc_function_list$f
,calc_function_list$params)
# Removing data object from memory
rm(dat)
}
calc_multiple()
establish_con_olvr_rplc()
calc_multiple()
calc_function_list <- tribble(
~f,                                          ~params,
## Average Number of Days from Accepted by Provider to Scheduled (PM #1) X --Scheduling DONE
## % of Referrals Scheduled within 3 Days from date Accepted by provider (PM #1) X --Scheduling DONE
"calc_pm",                        list(data = dat
, start = "assigned"
, stop = "agreed"
, metric = "pm1"
, target = 3),
## Average Days from Accepted by Provider to First Scheduled Visit (PM #2)
## % of Referrals with a Scheduled Visit within 7 Days of provider Accepting referral (PM #2)
"calc_pm",                        list(data = dat
, start = "assigned"
, stop = "scheduled"
, metric = 'pm2'
, target = 7),
"calc_prop_missed_visit_prvdr_fault",            list(),
"calc_child_count_referral",                     list()
)
purrr::invoke_map(calc_function_list$f
,calc_function_list$params)
library(oliveR2)
calc_multiple()
establish_con_olvr_rplc(set_schema = bld_sch_name)
calc_multiple()
library(oliveR2)
calc_multiple()
calc_multiple
cacl_pm
calc_pm
library(oliveR2)
calc_pm
